{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/dnannsumkbn2.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan\u2013Babu\u0161ka algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babu\u0161ka-Summation-Algorithm.\" _Computing_ 76 (3): 279\u201393. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ccs;\n\tvar flg;\n\tvar cs;\n\tvar cc;\n\tvar ix;\n\tvar io;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = 0.0;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ io ] = 0.0;\n\t\t\tout[ io+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ io ] = x[ ix ] * N;\n\t\tout[ io+strideOut ] = N;\n\t\treturn out;\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t}\n\tif ( i === N ) {\n\t\tout[ io ] = 0.0;\n\t\tout[ io+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tn = 1;\n\tsum = v;\n\tix += strideX;\n\ti += 1;\n\n\t// In order to preserve the sign of zero which can be lost during compensated summation below, find the first non-zero element...\n\tif ( sum === 0.0 ) {\n\t\tfor ( ; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) === false ) {\n\t\t\t\tif ( v !== 0.0 ) {\n\t\t\t\t\tflg = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsum += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += strideX;\n\t\t}\n\t} else {\n\t\tflg = true;\n\t}\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\tfor ( ; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc = (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc = (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tt = cs + c;\n\t\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\t\tcc = (cs-t) + c;\n\t\t\t} else {\n\t\t\t\tcc = (c-t) + cs;\n\t\t\t}\n\t\t\tcs = t;\n\t\t\tccs += cc;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ io ] = ( flg ) ? sum+cs+ccs : sum;\n\tout[ io+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a second-order iterative Kahan\u2013Babu\u0161ka algorithm, as described by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babu\u0161ka-Summation-Algorithm.\" _Computing_ 76 (3): 279\u201393. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*/\nfunction dnannsumkbn2( N, x, strideX, out, strideOut ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ), out, strideOut, stride2offset( 2, strideOut ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dnannsumkbn2 = require( './dnannsumkbn2.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnannsumkbn2, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of double-precision floating-point strided array elements, ignoring `NaN` values and using a second-order iterative Kahan\u2013Babu\u0161ka algorithm.\n*\n* @module @stdlib/blas-ext-base-dnannsumkbn2\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnannsumkbn2 = require( '@stdlib/blas-ext-base-dnannsumkbn2' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2( x.length, x, 1, out, 1 );\n* // returns <Float64Array>[ 1.0, 3 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnannsumkbn2 = require( '@stdlib/blas-ext-base-dnannsumkbn2' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dnannsumkbn2.ndarray( 5, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 5.0, 4 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dnannsumkbn2;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdnannsumkbn2 = main;\n} else {\n\tdnannsumkbn2 = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnannsumkbn2;\n\n// exports: { \"ndarray\": \"dnannsumkbn2.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAM,QAAS,+BAAgC,EAkCnD,SAASC,EAAcC,EAAGC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,EAAY,CAC1E,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAL,EAAKP,EACAN,GAAK,EACT,OAAAI,EAAKS,CAAG,EAAI,EACZT,EAAKS,EAAGR,CAAU,EAAI,EACfD,EAGR,GADAQ,EAAKT,EACAD,IAAY,EAChB,OAAKL,EAAOI,EAAGW,CAAG,CAAE,GACnBR,EAAKS,CAAG,EAAI,EACZT,EAAKS,EAAGR,CAAU,EAAI,EACfD,IAERA,EAAKS,CAAG,EAAIZ,EAAGW,CAAG,EAAIZ,EACtBI,EAAKS,EAAGR,CAAU,EAAIL,EACfI,GAGR,IAAMc,EAAI,EAAGA,EAAIlB,IAChBc,EAAIb,EAAGW,CAAG,EACLf,EAAOiB,CAAE,IAAM,IAFDI,IAKnBN,GAAMV,EAEP,GAAKgB,IAAMlB,EACV,OAAAI,EAAKS,CAAG,EAAI,EACZT,EAAKS,EAAGR,CAAU,EAAI,EACfD,EAQR,GANAa,EAAI,EACJV,EAAMO,EACNF,GAAMV,EACNgB,GAAK,EAGAX,IAAQ,EACZ,KAAQW,EAAIlB,EAAGkB,IAAM,CAEpB,GADAJ,EAAIb,EAAGW,CAAG,EACLf,EAAOiB,CAAE,IAAM,GAAQ,CAC3B,GAAKA,IAAM,EAAM,CAChBL,EAAM,GACN,KACD,CACAF,GAAOO,EACPG,GAAK,CACN,CACAL,GAAMV,CACP,MAEAO,EAAM,GAIP,IAFAD,EAAM,EACNE,EAAK,EACGQ,EAAIlB,EAAGkB,IACdJ,EAAIb,EAAGW,CAAG,EACLf,EAAOiB,CAAE,IAAM,KACnBC,EAAIR,EAAMO,EACLhB,EAAKS,CAAI,GAAKT,EAAKgB,CAAE,EACzBE,EAAKT,EAAIQ,EAAKD,EAEdE,EAAKF,EAAEC,EAAKR,EAEbA,EAAMQ,EACNA,EAAIL,EAAKM,EACJlB,EAAKY,CAAG,GAAKZ,EAAKkB,CAAE,EACxBL,EAAMD,EAAGK,EAAKC,EAEdL,EAAMK,EAAED,EAAKL,EAEdA,EAAKK,EACLP,GAAOG,EACPM,GAAK,GAENL,GAAMV,EAEP,OAAAE,EAAKS,CAAG,EAAMJ,EAAQF,EAAIG,EAAGF,EAAMD,EACnCH,EAAKS,EAAGR,CAAU,EAAIY,EACfb,CACR,CAKAR,EAAO,QAAUG,IC3JjB,IAAAoB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAgCd,SAASC,EAAcC,EAAGC,EAAGC,EAASC,EAAKC,EAAY,CACtD,OAAON,EAASE,EAAGC,EAAGC,EAASL,EAAeG,EAAGE,CAAQ,EAAGC,EAAKC,EAAWP,EAAe,EAAGO,CAAU,CAAE,CAC3G,CAKAR,EAAO,QAAUG,IC9DjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAe,IACfC,EAAU,IAKdF,EAAaC,EAAc,UAAWC,CAAQ,EAK9CH,EAAO,QAAUE,ICcjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAeD,EAEfC,EAAeC,EAMhB,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "isnan", "abs", "dnannsumkbn2", "N", "x", "strideX", "offsetX", "out", "strideOut", "offsetOut", "sum", "ccs", "flg", "cs", "cc", "ix", "io", "v", "t", "c", "n", "i", "require_dnannsumkbn2", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "dnannsumkbn2", "N", "x", "strideX", "out", "strideOut", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dnannsumkbn2", "ndarray", "join", "tryRequire", "isError", "main", "dnannsumkbn2", "tmp"]
}
