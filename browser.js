// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,t;e=this,t=function(){"use strict";var e="function"==typeof Object.defineProperty?Object.defineProperty:null,t=function(){try{return e({},"x",{}),!0}catch(e){return!1}},r=Object.defineProperty,n=Object.prototype,o=n.toString,i=n.__defineGetter__,u=n.__defineSetter__,a=n.__lookupGetter__,l=n.__lookupSetter__,f=r,c=function(e,t,r){var f,c,_,p;if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof r||null===r||"[object Array]"===o.call(r))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+r+"`.");if((c="value"in r)&&(a.call(e,t)||l.call(e,t)?(f=e.__proto__,e.__proto__=n,delete e[t],e[t]=r.value,e.__proto__=f):e[t]=r.value),_="get"in r,p="set"in r,c&&(_||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return _&&i&&i.call(e,t,r.get),p&&u&&u.call(e,t,r.set),e},_=t()?f:c,p=function(e){return e!=e},d=function(e){return Math.abs(e)};function b(e,t,r,n,o){var i,u,a,l,f,c,_,b,s,y,v;if(f=r<0?(1-e)*r:0,c=o<0?-o:0,i=0,e<=0)return n[c]=i,n[c+o]=0,n;if(1===e||0===r)return p(t[f])?(n[c]=i,n[c+o]=0,n):(n[c]=t[f],n[c+o]=1,n);for(u=0,a=0,y=0,v=0;v<e;v++)_=t[f],!1===p(_)&&(b=i+_,s=d(i)>=d(_)?i-b+_:_-b+i,i=b,b=a+s,l=d(a)>=d(s)?a-b+s:s-b+a,a=b,u+=l,y+=1),f+=r;return n[c]=i+a+u,n[c+o]=y,n}return _(b,"ndarray",{configurable:!1,enumerable:!1,writable:!1,value:function(e,t,r,n,o,i,u){var a,l,f,c,_,b,s,y,v,m,j;if(_=n,b=u,a=0,e<=0)return o[b]=a,o[b+i]=0,o;if(1===e||0===r)return p(t[_])?(o[b]=a,o[b+i]=0,o):(o[b]=t[_],o[b+i]=1,o);for(l=0,f=0,m=0,j=0;j<e;j++)s=t[_],!1===p(s)&&(y=a+s,v=d(a)>=d(s)?a-y+s:s-y+a,a=y,y=f+v,c=d(f)>=d(v)?f-y+v:v-y+f,f=y,l+=c,m+=1),_+=r;return o[b]=a+f+l,o[b+i]=m,o}}),b},"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).dnannsumkbn2=t();
//# sourceMappingURL=browser.js.map
